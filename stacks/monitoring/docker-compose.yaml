version: '3.2'

networks:
  default: # this docker-compose network
    name: monitoring_network
    driver: bridge
  tunnel_network: # Cloudflare zero trust tunnel network
    external: true

services:
  prometheus:
    # https://hub.docker.com/r/prom/prometheus/tags
    image: prom/prometheus:${PROMETHEUS_VERSION:-latest}
    container_name: monitoring_prometheus
    user: "${PUID}"
    networks:
      - default
    ports:
      - "9090:9090"
    volumes:
      - ${PROMETHEUS_PATH}:/etc/prometheus
      - ${PROMETHEUS_PATH}/data:/prometheus
    restart: unless-stopped
    # command:
    #   - '--config.file=/etc/prometheus/prometheus.yml'
    #   - '--storage.tsdb.path=/prometheus'
    #   - '--web.console.libraries=/usr/share/prometheus/console_libraries'
    #   - '--web.console.templates=/usr/share/prometheus/consoles'
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # TODO: Keeps crashing
  # alertmanager:
  #   # https://hub.docker.com/r/prom/alertmanager/tags
  #   image: prom/alertmanager:${ALERTMANAGER_VERSION:-latest}
  #   container_name: monitoring_alertmanager
  #   user: "${PUID}"
  #   networks:
  #     - default
  #   ports:
  #     - "9093:9093"
  #   volumes:
  #     - ${ALERTMANAGER_PATH}:/etc/alertmanager
  #     # - ${ALERTMANAGER_PATH}/data:/alertmanager
  #   restart: unless-stopped
  #   # command:
  #     # - '--config.file=/etc/alertmanager/alertmanager.yml'
  #     # - '--storage.path=/alertmanager'
  #   labels:
  #     - "com.centurylinklabs.watchtower.enable=true"

  redis:
    # https://hub.docker.com/_/redis?tab=tags
    image: redis:${REDIS_VERSION:-latest}
    container_name: monitoring_redis
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    networks:
      - default
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Docker metrics collector
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:${CADVISOR_VERSION:-latest}
    container_name: monitoring_cadvisor
    # ports: # Commented out because we are using the docker network and do not need to open ports
    #   - 8080:8080
    networks:
      - default
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
      - redis
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Host metrics collector
  nodeexporter:
    image: prom/node-exporter:${NODE_EXPORTER_VERSION:-latest}
    container_name: monitoring_node_exporter
    # ports:
    #   - 9100:9100
    networks:
      - default
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # https://github.com/grafana/grafana
  grafana:
    image: grafana/grafana-oss:${GRAFANA_VERSION:-latest}
    container_name: monitoring_grafana
    user: "${PUID}"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS="grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel,grafana-worldmap-panel"
    # ports:
    #   - "3000:3000"
    networks:
      - default
      - tunnel_network
    volumes:
      - ${GRAFANA_PATH}:/var/lib/grafana
      - ${GRAFANA_PATH}/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  speedtest:
    # https://github.com/beykansen/internet-speed-monitor
    image: ghcr.io/beykansen/internet-speed-monitor:${INTERNET_SPEED_MONITOR_VERSION:-latest}
    container_name: monitoring_speedtest
    environment:
      - PORT=8083
      - INTERVAL=15 # In minutes
      - CALLBACK=${SPEEDTEST_CALLBACK}
    # ports: # Commented out because we are using the docker network and do not need to open ports
    #   - "8083:8083"
    networks:
      - default
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # https://hub.docker.com/_/influxdb/
  influxdb:
    image: influxdb:${INFLUXDB_VERSION:-latest}
    container_name: monitoring_influxdb
    ports:
      - "8086:8086"
    volumes:
      - ${INFLUXDB_PATH}/data:/var/lib/influxdb2
      - ${INFLUXDB_PATH}/config:/etc/influxdb2
    environment:
      - INFLUXDB_DB=telegraf
      - INFLUXDB_USER=telegraf
      - INFLUXDB_ADMIN_ENABLED=true
      - INFLUXDB_ADMIN_USER=${INFLUXDB_ADMIN_USER:-admin}
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_ADMIN_PASSWORD:-admin}
    networks:
      - default
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  telegraf:
    # https://hub.docker.com/_/telegraf
    image: telegraf:${TELEGRAF_VERSION:-latest}
    container_name: monitoring_telegraf
    volumes:
      - ${TELEGRAF_PATH}/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    ports:
     - "9273:9273"
    networks:
      - default
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
   